//
//  MovieListViewController.swift
//  ListProject
//
//  Created by Ruy de Ascenção Neto on 31/08/20.
//  Copyright (c) 2020 CocoaPods. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxSwift
import RxCocoa
protocol MovieListDisplayLogic: class{
    func displayLoading()
    func displayList(movieList:MovieList.ShowList.ViewModel)
    func displayError()
}

class MovieListViewController: UIViewController, MovieListDisplayLogic{
    
    func displayError() {
        self.view = self.movieListErrorView
    }
    
    func displayLoading(){
        self.view = MovieListLoadingView()
    }
    
    func displayList(movieList:MovieList.ShowList.ViewModel){
        self.view = self.movieListView
        dataSourceDelegate.data =  movieList.movieList
        self.movieListView.listView.reloadData()
    }
    
    var interactor: MovieListBusinessLogic?
    var router: (NSObjectProtocol & MovieListRoutingLogic & MovieListDataPassing)?

    var movieListErrorView: MovieListErrorView = {
        let error = MovieListErrorView()
        return error
    }()
    
    var movieListView: MovieListUIView = {
        let view = MovieListUIView()
        return view
    }()
    
    var dataSourceDelegate:MovieListDSDelegate = {
        let ds = MovieListDSDelegate()
        return ds
    }()
    
    var buttonRestartObservable:Disposable?
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = MovieListInteractor()
    let presenter = MovieListPresenter()
    let router = MovieListRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
    displayLoading()
    interactor.requestMovies()
    movieListView.listView.delegate   = self.dataSourceDelegate
    movieListView.listView.dataSource = self.dataSourceDelegate
    configureNavigationController()
    setupButtons()
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
    func configureNavigationController(){
        self.navigationItem.title = "Lista de Filmes"
    }
    
  // MARK: View lifecycle
  
  override func viewDidLoad(){
    super.viewDidLoad()
  }

    func setupButtons(){
        self.buttonRestartObservable = self.movieListErrorView.buttonRestart.rx.tap.bind{
            self.tryAgain()
        }
    }
    
    func tryAgain(){
        guard let interactor = self.interactor else{return }
        displayLoading()
        interactor.requestMovies()
    }
    
}
